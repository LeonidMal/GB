package IT_COURSE.JAVA_COURSE.Lecture;

// import java.io.File;
// import java.util.Locale;
// import java.util.logging.ConsoleHandler;
// import java.util.logging.Level;
// import java.util.logging.Logger;
// import java.util.logging.XMLFormatter;

// import IT_COURSE.JAVA_COURSE.Lecture.tempMethods;


public class two {
    public static void main(String[] args) {
        
//----------------------------------------------------------**API: РАБОТА СО СТРОКАМИ**------------------------------------------------------------------

//------------------------------**Класс StringBuildier


        // String str = "";
        // var s = System.currentTimeMillis();                // System.currentTimeMillis() подсчитывает кол-во миллисекунд, затраченных на выполнение кода
        // StringBuilder sb = new StringBuilder(); 
        // for (int i = 0; i < 10000; i++) {                  // с помощью класса StringBuildier можно преобразовывать строку, не создавая
            // str += "+";                                 // дополнительные объекты
            // sb.append("+");
        // }
        // System.out.println(str);
        // System.out.println(sb);
        // System.out.printf("%d ms", System.currentTimeMillis() - s);         

//----------------------------------------------------------**МЕТОДЫ КЛАССА StringBuildier**-------------------------------------------------------------------------------------------------------------------

/*
append() -------------------------------------- Добавляет данные в конец строки.
insert() -------------------------------------- Вставляет данные в указанную позицию.
delete() -------------------------------------- Удаляет символы в указанном диапазоне.
deleteCharAt() -------------------------------- Удаляет символ по указанному индексу.
replace() ------------------------------------- Заменяет символы в указанном диапазоне новыми данными.
reverse() ------------------------------------- Изменяет порядок символов на обратный.
charAt() -------------------------------------- Возвращает символ по указанному индексу.
length() -------------------------------------- Возвращает текущую длину строки.
substring() ----------------------------------- Возвращает подстроку строки.
toString() ------------------------------------ Преобразует StringBuilder в обычную неизменяемую строку (String).
capacity() ------------------------------------ Возвращает текущую емкость (capacity) StringBuilder. Емкость - это количество символов, которое может вместить StringBuilder без изменения его размера.
ensureCapacity(int minimumCapacity) ----------- Гарантирует, что емкость StringBuilder будет не меньше указанного значения minimumCapacity.
trimToSize() ---------------------------------- Уменьшает емкость StringBuilder до его текущей длины.
codePointAt(int index) ------------------------ Возвращают кодовую точку Unicode по указанному индексу
codePointBefore(int index) -------------------- Возвращают кодовую точку Unicode перед указанным индексом.
codePointCount(int beginIndex, int endIndex) -- Возвращает количество кодовых точек Unicode в указанном диапазоне.
offsetByCodePoints(int index, int Points) ----- Возвращает индекс, смещенный на заданное количество кодовых точек.
subSequence(int start, int end) --------------- Возвращает подпоследовательность StringBuilder в виде CharSequence.
delete(int start, int end) -------------------- Удаляет символы в указанном диапазоне.
indexOf(String str) --------------------------- Возвращают индекс первого вхождения подстроки в StringBuilder.
lastIndexOf(String str) ----------------------- Возвращают индекс последнего вхождения подстроки в StringBuilder.
indexOf(String str, int fromIndex) ------------ Возвращают индекс первого вхождения подстроки, начиная с указанной позиции fromIndex.
lastIndexOf(String str, int fromIndex) -------- Возвращают индекс последнего вхождения подстроки, начиная с указанной позиции fromIndex.
substring(int start) -------------------------- Возвращает подстроку, начиная с указанной позиции до конца строки.
replace(int start, int end, String str) ------- Заменяет указанный диапазон символов строкой str.
setCharAt(int index, char ch) ----------------- Заменяет символ в указанной позиции.
substring(int start, int end) ----------------- Возвращает подстроку, начиная с указанной позиции и заканчивая позицией end.
*/

//---------------------------------------------------**МЕТОДЫ КЛАССА String (java.lang.String)**---------------------------------------------------------------------------------------------------------------

/*
join() ---------------------------------------- Объединяет набор строк в одну с учетом разделителя.
trim() ---------------------------------------- Удаляет начальные и конечные пробелы из строки.
length() -------------------------------------- Возвращает количество символов в строке.
valueOf() ------------------------------------- Конвертирует различные типы данных в строку. *Как правило объявляется через String. Пример: String.valueOf(number);
toLowerCase() --------------------------------- Преобразует все символы строки в нижний регистр.
toUpperCase() --------------------------------- Преобразует все символы строки в верхний регистр.
charAt(int index): ---------------------------- Возвращает символ, находящийся по указанному индексу.
concat(String str) ---------------------------- Объединяет строку с другой строкой.
indexOf(String str) --------------------------- Возвращает индекс первого вхождения подстроки.
split(String regex) --------------------------- Разбивает строку на массив подстрок по указанному регулярному выражению.
substring(int beginIndex) --------------------- Возвращает подстроку строки, начинающуюся с указаного индекса.
substring(int beginIndex, int endIndex) ------- Возвращает подстроку строки в указанном диапазоне (не включая endIndex).
lastIndexOf(String str) ----------------------- Возвращает индекс последнего вхождения подстроки.
equals(Object obj) ---------------------------- Сравнивает строки на равенство, учитывая регистр.
equalsIgnoreCase(String anotherString) -------- Сравнивает строки на равенство, игнорируя регистр.
startsWith(String prefix) --------------------- Проверяет, начинается ли строка определенным префиксом или суффиксом.
endsWith(String suffix) ----------------------- Проверяет, заканчивается ли строка определенным префиксом или суффиксом.
toLowerCase(Locale locale) -------------------- Преобразует все символы строки в нижний регистр с учетом указанной локали.
toUpperCase(Locale locale) -------------------- Преобразует все символы строки в верхний регистр с учетом указанной локали.
codePointAt(int index) ------------------------ Возвращает кодовую точку Unicode по указанному индексу.
codePointBefore(int index) -------------------- Возвращает кодовую точку Unicode перед указанным индексом.
codePointCount(int beginIndex, int endIndex) -- Возвращает количество кодовых точек Unicode в указанном диапазоне.
offsetByCodePoints(int index, int Points) ----- Возвращает индекс, смещенный на заданное количество кодовых точек.
matches(String regex) ------------------------- Проверяет, соответствует ли строка заданному регулярному выражению.
contains(CharSequence sequence) --------------- Проверяет, содержит ли строка указанную последовательность символов.
contentEquals(CharSequence cs) ---------------- Проверяет, равна ли содержимое строки указанной последовательности символов.
startsWith(String prefix, int toffset) -------- Проверяет, начинается ли строка определенным префиксом, начиная с указанной позиции или в указанном диапазоне.
endsWith(String suffix) ----------------------- Проверяет, заканчивается строка определенным префиксом, начиная с указанной позиции.
compareTo(String anotherString) --------------- Сравнивает строки лексикографически, учитывая регистр.
compareToIgnoreCase(String str) --------------- Сравнивает строки лексикографически, игнорируя регистр.

replace(char oldChar, char newChar) -- Заменяет символ в строке.
replaceAll(String regex, String replacement) -- Заменяет все вхождения подстроки, соответствующей регулярному выражению, новой подстрокой.
replaceFirst(String regex, String replacement) -- Заменяет первое вхождение подстроки, соответствующей регулярному выражению, новой подстрокой.
replace(CharSequence target, CharSequence replacement) -- Заменяет подстроку (последовательность символов) в строке.
regionMatches(int toffset, String other, int ooffset, int len) -- Проверяет, совпадают ли подстроки двух строк в указанных диапазонах, учитывая регистр.
regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len) -- Проверяет, совпадают ли подстроки двух строк в указанных диапазонах, игнорируя регистр.
*/

//-------------------------------------------------------**РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ (regex)**------------------------------------------------------------------

//----Регулярные выражения - строки, которые описывают шаблоны для поиска и сопоставления подстрок в тексте.

/*
>>Цифры:
    \d - одна цифра (аналогично [0-9]).
    \D - один символ, не являющийся цифрой (аналогично [^0-9]).

>>Пробельные символы:
    \s - один пробельный символ (пробел, табуляция, новая строка).
    \S - один символ, не являющийся пробельным.

>>Буквы и цифры:
    \w - одна буква или цифра (аналогично [a-zA-Z0-9]).
    \W - один символ, не являющийся буквой или цифрой.

>>Точка:
    . - любой символ, кроме новой строки (\n).

>>Группировка:
    () - группирует выражение внутри скобок.

>>Квантификаторы:
    * - ноль или более повторений предыдущего символа.
    + - одно или более повторений предыдущего символа.
    ? - ноль или одно повторение предыдущего символа.
    {n} - ровно n повторений.
    {n,} - n или более повторений.
    {n,m} - от n до m повторений.

>>Начало и конец строки:
    ^ - начало строки.
    $ - конец строки.

>>Интервалы символов:
    [aeiou] - один символ, который является любой из указанных гласных.
    [^0-9] - один символ, не являющийся цифрой.

>>Экранирование специальных символов:
    \ - используется для экранирования специальных символов, чтобы они были восприняты буквально.

>>Группы и обратные ссылки:
    ([a-zA-Z]+) (\d+) - две группы, первая для букв, вторая для цифр.
    (\w+) \1 - поиск повторяющихся слов.

>>Электронная почта:
    \b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b - для проверки формата электронной почты.

>>URL:
    https?://\S+ - для поиска HTTP или HTTPS URL.

>>Дата:
    \d{2}/\d{2}/\d{4} - для поиска даты в формате "DD/MM/YYYY".
    \d{4}-\d{2}-\d{2} - для поиска даты в формате "YYYY-MM-DD".

>>Телефонные номера:
    \d{3}-\d{3}-\d{4} - для поиска номеров телефона в формате "XXX-XXX-XXXX".

>>IPv4-адреса:
    \b(?:\d{1,3}\.){3}\d{1,3}\b - для поиска IPv4-адресов.

>>Шестнадцатеричные числа:
    0x[0-9A-Fa-f]+ - для поиска шестнадцатеричных чисел.

>>HTML-теги:
    <[^>]+> - для поиска HTML-тегов.

>>Слова, начинающиеся с определенной буквы:
    \b[AaBbCc]\w*\b - для поиска слов, начинающихся с букв A, B или C.

>>Операторы сравнения:
    (==|!=|<=?|>=?) - для поиска операторов сравнения.

>>UUID:
    [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12} - для поиска UUID.

>>Захват групп:
    (\w+)-(\d+) - для захвата слова и числа, разделенных дефисом.
*/

//------------------------------------------------**РАБОТА С ФАЙЛОВОЙ СИСТЕМОЙ**--------------------------------------------------------------------------------
        
//-----------------------------------------------библиотека import java.io.File;

//---------------------------------------------ИЗ УРОКА*

/*
isHidden() ----------- возвращает истину, если каталог или файл является скрытым.
length()-------------- возвращает размер файла в байтах.
lastModified() ------- возвращает время последнего изменения файла или каталога.
list() --------------- возвращает массив файлов и подкаталогов, которые находятся в каталоге.
listFiles() ---------- возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге.
mkdir() -------------- создает новый каталог.
renameTo(File dest) -- переименовывает файл или каталог.
length() ------------- возвращает размер файла в байтах.
lastModified() ------- возвращает время последнего изменения файла или каталога.
list() --------------- возвращает массив файлов и подкаталогов, которые находятся в каталоге.
listFiles() ---------- возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге.
mkdir() -------------- создает новый каталог.
renameTo(File dest) -- переименовывает файл или каталог.
getAbsolutePath() ---- узнать абсолютный путь к файлую.

>>класс System:
    System.getProperty("user.dir") --- Получение системного пути к текущему рабочему каталогу
    System.getProperty("user.home") -- Получение системного пути к домашнему каталогу пользователя
*/

//---------------------------------------------ИЗ CHATGPT*

/*
>>Конструкторы:
    File(String pathname) - создает объект File для указанного пути.
    File(String parent, String child) - создает объект File из родительского пути и дочернего пути.
    File(File parent, String child) - создает объект File из родительского объекта File и дочернего пути.

>>Методы для получения информации о файле:
    String getName() - возвращает имя файла или директории.
    String getPath() - возвращает путь к файлу или директории в виде строки.
    String getAbsolutePath() - возвращает абсолютный путь к файлу или директории в виде строки.
    boolean exists() - проверяет, существует ли файл или директория.
    boolean isFile() - проверяет, является ли объект File файлом.
    boolean isDirectory() - проверяет, является ли объект File директорией.
    long lastModified() - возвращает время последней модификации файла.
    long length() - возвращает размер файла в байтах.

>>Методы для манипуляции файлами:
    boolean createNewFile() - создает новый пустой файл.
    boolean delete() - удаляет файл или директорию.
    boolean mkdir() - создает новую директорию.
    boolean mkdirs() - создает директорию вместе с необходимыми родительскими директориями.
    boolean renameTo(File dest) - переименовывает файл или перемещает его в другую директорию.

>>Методы для навигации по файловой системе:
    String[] list() - возвращает массив имен файлов и поддиректорий в текущей директории.
    File[] listFiles() - возвращает массив объектов File с представлением файлов и поддиректорий в текущей директории.

>>Методы для проверки разрешений:
    boolean canRead() - проверяет, доступен ли файл для чтения.
    boolean canWrite() - проверяет, доступен ли файл для записи.
    boolean setReadOnly() - устанавливает файл как доступный только для чтения.


//----------------------------------современная альтернатива - библиотека java.nio.file

>>Интерфейс Path:
    Path getFileName() - возвращает имя файла или директории в виде объекта Path.
    Path getParent() - возвращает родительскую директорию в виде объекта Path.
    Path resolve(String other) - разрешает указанный путь относительно текущего.
    Path toAbsolutePath() - возвращает абсолютный путь в виде объекта Path.
    File toFile() - возвращает объект File, представляющий этот путь (для совместимости с более старым кодом).

>>Интерфейс Files:
    static Path createFile(Path path, FileAttribute<?>... attrs) - создает файл по указанному пути.
    static Path createDirectory(Path dir, FileAttribute<?>... attrs) - создает директорию по указанному пути.
    static Path copy(Path source, Path target, CopyOption... options) - копирует файл или директорию.
    static Path move(Path source, Path target, CopyOption... options) - перемещает файл или директорию.
    static boolean exists(Path path, LinkOption... options) - проверяет, существует ли файл или директория.
    static boolean isDirectory(Path path, LinkOption... options) - проверяет, является ли путь директорией.
    static boolean isRegularFile(Path path, LinkOption... options) - проверяет, является ли путь обычным файлом.
    static boolean isReadable(Path path) - проверяет, доступен ли файл для чтения.
    static boolean isWritable(Path path) - проверяет, доступен ли файл для записи.
    static boolean isExecutable(Path path) - проверяет, является ли файл исполняемым.
    static long size(Path path) - возвращает размер файла в байтах.
    static Stream<String> lines(Path path) - возвращает поток строк из файла.

>>Интерфейс FileVisitor<T>:
    Методы для обхода дерева файлов - visitFile, preVisitDirectory, postVisitDirectory, visitFileFailed.

>>Класс FileSystems:
    static FileSystem getDefault() - возвращает систему файлов по умолчанию.

>>Класс StandardOpenOption:
    Перечисление, предоставляющее опции для открытия файла: например, READ, WRITE, APPEND, CREATE.
*/

//-----------------------------------------СОЗДАНИЕ КАТАЛОГА ПО УКАЗАННОМУ ПУТИ (ЕСЛИ ЕЩЕ НЕ СУЩЕСТВУЕТ)-------------------------------------------------
        

        // String pathProject1 = System.getProperty("user.dir");
        // String pathDir = pathProject1.concat("/files");
        // File dir = new File(pathDir);
        // System.out.println(dir.getAbsolutePath ());
        // if (dir.mkdir()) {
        //     System.out.println("+");
        // } else {
        //     System.out.println("-");
        // }
        // for (String fname : dir.list()) {
        //     System.out.println(fname);
        // }


//-----------------------------------------СОЗДАНИЕ ФАЙЛА В УКАЗАННОМ КАТАЛОГЕ (ЕСЛИ ЕЩЕ НЕ СУЩЕСТВУЕТ)--------------------------------------------------
        

        // try {
        //     String pathProject2 = System.getProperty("user.dir");
        //     String pathFile = pathProject2.concat("/files/file.txt");
        //     File file = new File(pathFile);
        //     if (file.createNewFile()) {
        //         System.out.println("file.created");
        //     } else {
        //         System.out.println("file.existed");
        //     }
        // } catch (Exception e) {
        //     System.out.println("catch");
        // } finally {
        //     System.out.println("finally");
        // }

//-------------------------------------------------------ЛОГИРОВАНИЕ-------------------------------------------------------------------------------------
       

        // Logger logger = Logger.getLogger(two.class.getName());
        // logger.setLevel(Level.INFO);
        // ConsoleHandler ch = new ConsoleHandler();
        // logger.addHandler(ch);
        // XMLFormatter xml = new XMLFormatter();
        // ch.setFormatter(xml);
        // logger.log(Level.WARNING, "Тестовое логирование");
        // logger.info("Тестовое логирование");

    }
}
